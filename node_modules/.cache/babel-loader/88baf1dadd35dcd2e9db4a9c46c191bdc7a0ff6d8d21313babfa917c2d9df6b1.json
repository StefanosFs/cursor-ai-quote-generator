{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stefa\\\\Desktop\\\\cursor-ai-tutorial\\\\src\\\\components\\\\QuoteGenerator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './QuoteGenerator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialQuotes = [{\n  text: \"The only way to do great work is to love what you do. - Steve Jobs\",\n  rating: 0\n}, {\n  text: \"Innovation distinguishes between a leader and a follower. - Steve Jobs\",\n  rating: 0\n}, {\n  text: \"Stay hungry, stay foolish. - Steve Jobs\",\n  rating: 0\n}, {\n  text: \"The future belongs to those who believe in the beauty of their dreams. - Eleanor Roosevelt\",\n  rating: 0\n}, {\n  text: \"Success is not final, failure is not fatal: it is the courage to continue that counts. - Winston Churchill\",\n  rating: 0\n}, {\n  text: \"Be the change you wish to see in the world. - Mahatma Gandhi\",\n  rating: 0\n}, {\n  text: \"Everything you've ever wanted is on the other side of fear. - George Addair\",\n  rating: 0\n}, {\n  text: \"The only impossible journey is the one you never begin. - Tony Robbins\",\n  rating: 0\n}, {\n  text: \"The best time to plant a tree was 20 years ago. The second best time is now. - Chinese Proverb\",\n  rating: 0\n}, {\n  text: \"Life is what happens when you're busy making other plans. - John Lennon\",\n  rating: 0\n}];\nconst QuoteGenerator = ({\n  onNewQuote\n}) => {\n  _s();\n  const [quotes, setQuotes] = useState(initialQuotes);\n  const [currentQuoteIndex, setCurrentQuoteIndex] = useState(0);\n  const generateNewQuote = () => {\n    let newIndex;\n    do {\n      newIndex = Math.floor(Math.random() * quotes.length);\n    } while (newIndex === currentQuoteIndex);\n    setCurrentQuoteIndex(newIndex);\n    onNewQuote();\n  };\n  const handleRating = rating => {\n    const updatedQuotes = [...quotes];\n    updatedQuotes[currentQuoteIndex].rating = rating;\n    setQuotes(updatedQuotes);\n  };\n  const StarRating = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"star-rating\",\n      children: [1, 2, 3, 4, 5].map(star => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `star ${star <= quotes[currentQuoteIndex].rating ? 'filled' : ''}`,\n        onClick: () => handleRating(star),\n        children: \"\\u2605\"\n      }, star, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quote-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quote-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"quote-text\",\n        children: quotes[currentQuoteIndex].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StarRating, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"quote-button\",\n        onClick: generateNewQuote,\n        children: \"New Quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(QuoteGenerator, \"YRKSV/eoT3k4f5kwLK5A7yHHKJU=\");\n_c = QuoteGenerator;\nexport default QuoteGenerator;\nvar _c;\n$RefreshReg$(_c, \"QuoteGenerator\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialQuotes","text","rating","QuoteGenerator","onNewQuote","_s","quotes","setQuotes","currentQuoteIndex","setCurrentQuoteIndex","generateNewQuote","newIndex","Math","floor","random","length","handleRating","updatedQuotes","StarRating","className","children","map","star","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/stefa/Desktop/cursor-ai-tutorial/src/components/QuoteGenerator.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './QuoteGenerator.css';\r\n\r\ninterface Quote {\r\n    text: string;\r\n    rating: number;\r\n}\r\n\r\ninterface QuoteGeneratorProps {\r\n    onNewQuote: () => void;\r\n}\r\n\r\nconst initialQuotes: Quote[] = [\r\n    { text: \"The only way to do great work is to love what you do. - Steve Jobs\", rating: 0 },\r\n    { text: \"Innovation distinguishes between a leader and a follower. - Steve Jobs\", rating: 0 },\r\n    { text: \"Stay hungry, stay foolish. - Steve Jobs\", rating: 0 },\r\n    { text: \"The future belongs to those who believe in the beauty of their dreams. - Eleanor Roosevelt\", rating: 0 },\r\n    { text: \"Success is not final, failure is not fatal: it is the courage to continue that counts. - Winston Churchill\", rating: 0 },\r\n    { text: \"Be the change you wish to see in the world. - Mahatma Gandhi\", rating: 0 },\r\n    { text: \"Everything you've ever wanted is on the other side of fear. - George Addair\", rating: 0 },\r\n    { text: \"The only impossible journey is the one you never begin. - Tony Robbins\", rating: 0 },\r\n    { text: \"The best time to plant a tree was 20 years ago. The second best time is now. - Chinese Proverb\", rating: 0 },\r\n    { text: \"Life is what happens when you're busy making other plans. - John Lennon\", rating: 0 }\r\n];\r\n\r\nconst QuoteGenerator: React.FC<QuoteGeneratorProps> = ({ onNewQuote }) => {\r\n    const [quotes, setQuotes] = useState<Quote[]>(initialQuotes);\r\n    const [currentQuoteIndex, setCurrentQuoteIndex] = useState(0);\r\n\r\n    const generateNewQuote = () => {\r\n        let newIndex;\r\n        do {\r\n            newIndex = Math.floor(Math.random() * quotes.length);\r\n        } while (newIndex === currentQuoteIndex);\r\n        setCurrentQuoteIndex(newIndex);\r\n        onNewQuote();\r\n    };\r\n\r\n    const handleRating = (rating: number) => {\r\n        const updatedQuotes = [...quotes];\r\n        updatedQuotes[currentQuoteIndex].rating = rating;\r\n        setQuotes(updatedQuotes);\r\n    };\r\n\r\n    const StarRating = () => {\r\n        return (\r\n            <div className=\"star-rating\">\r\n                {[1, 2, 3, 4, 5].map((star) => (\r\n                    <span\r\n                        key={star}\r\n                        className={`star ${star <= quotes[currentQuoteIndex].rating ? 'filled' : ''}`}\r\n                        onClick={() => handleRating(star)}\r\n                    >\r\n                        â˜…\r\n                    </span>\r\n                ))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"quote-container\">\r\n            <div className=\"quote-box\">\r\n                <p className=\"quote-text\">{quotes[currentQuoteIndex].text}</p>\r\n                <StarRating />\r\n                <button className=\"quote-button\" onClick={generateNewQuote}>\r\n                    New Quote\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuoteGenerator; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}